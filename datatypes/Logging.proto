syntax = "proto3";

package MRA.Datatypes;

enum LogLevel // needs to be consistent with levels.hpp
{
    CRITICAL = 0;
    ERROR = 1;
    WARNING = 2;
    INFO = 3;
    DEBUG = 4;
    TRACE = 5;
}

// configuration can be customized per component
// the main structure LogControl contains a general LogSpec and optional component LogSpec overrules

message LogSpec
{
    string component = 1; // name of the component, for example "RobotsportsProofIsAlive"
    LogLevel level = 2; // level to use, default INFO
    bool enabled = 3; // write data to ASCII/JSON file (using level, spdlog), default true
    bool dumpTicks = 4; // write binary protobuf data to a file per tick, default false - can hurt performance but is valuable for debugging and unittesting
    int32 maxLineSize = 5; // number of characters to cut off lines, default something like 1000 - if this is too little, then consider using tickdump
    double maxFileSizeMB = 6; // a guard on file size growth, default something like: stop after file exceeds 10.0 MB
    string pattern = 7; // spdlog pattern, default something like: "[%Y-%m-%d %H:%M:%S.%f] [%n] [%^%l%$] %v"
    bool hotFlush = 8; // enable flush option
}

message LogControl
{
    string folder = 1; // folder to write to, default auto-create in /tmp, something like /tmp/mra_logging
    string filename = 2; // filename to use, default "<maincomponent>_<pid>.spdlog" (supports logging nested components into same file)
    LogSpec general = 3; // settings to use if no component overrule is specified
    repeated LogSpec overrules = 4; // component overrules, when not specified, use general settings
}

