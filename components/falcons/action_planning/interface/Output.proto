syntax = "proto3";

package MRA.FalconsActionPlanning;

import "datatypes/ActionResult.proto";
import "datatypes/PosVel.proto";
import "datatypes/Pose.proto";
import "components/falcons/action_aimed_kick/interface/Common.proto";
import "components/falcons/action_keeper/interface/Output.proto";

message MotionSetpoint
{
    MRA.Datatypes.PosVel target = 1; // use position.x, y and rz; velocity typically unused
    bool stop = 2; // use either this or target
    int32 motionType = 3; // optional
    bool obstacleAvoidanceDisabled = 4; // optional, default enabled
}

enum ShootingType
{
    SHOOT_TYPE_PASS = 0; // soft landing at teammate
    SHOOT_TYPE_SHOOT = 1; // max power typically
    SHOOT_TYPE_LOB = 2; // maximize height
}

message ShootingSetpoint
{
    double pos_x = 1; // FCS coordinates
    double pos_y = 2;
    double pos_z = 3;
    MRA.FalconsActionAimedKick.ShootingPhase phase = 4;
    ShootingType type = 5;
}

message KickerSetpoint
{
    double power = 1;
    double height = 2;
    bool discharge = 3; // trigger
}

message BallHandlersSetpoint
{
    bool enabled = 1; // engage to grab the ball
}

message Setpoints
{
    // combinations may be used, but not all combinations make sense
    // for instance: keeperFrame extension in combination with kick/shoot would be strange
    // also: an error should be triggered when both ShootingSetpoint and KickerSetpoint are used at the same time -- Shooting controls Kicker
    BallHandlersSetpoint bh = 1;
    MotionSetpoint move = 2;
    MRA.Datatypes.Pose velocity = 3;
    ShootingSetpoint shoot = 4;
    KickerSetpoint kick = 5;
    MRA.FalconsActionKeeper.KeeperFrameSetpoint keeperFrame = 6;
}

message Output
{
    Setpoints setpoints = 1;
    MRA.Datatypes.ActionResult actionresult = 2;
}

