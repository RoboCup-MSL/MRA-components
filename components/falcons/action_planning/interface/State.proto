syntax = "proto3";

package MRA.FalconsActionPlanning;
import "google/protobuf/timestamp.proto";
import "datatypes/ActionType.proto";
import "components/falcons/getball/interface/State.proto";
import "components/falcons/action_stop/interface/State.proto";
import "components/falcons/action_move/interface/State.proto";
import "components/falcons/action_aimed_kick/interface/State.proto";
import "components/falcons/action_park/interface/State.proto";
import "components/falcons/action_catch_ball/interface/State.proto";
import "components/falcons/action_keeper/interface/State.proto";
import "components/falcons/action_planning/interface/Input.proto";
import "components/falcons/action_planning/interface/Output.proto";
import "components/falcons/action_planning/interface/Params.proto";
import "components/falcons/action_planning/interface/Diagnostics.proto";

message ActionState
{
    MRA.Datatypes.ActionType type = 1;
    oneof state
    {
        MRA.FalconsActionStop.State stop = 2;
        MRA.FalconsActionMove.State move = 3;
        MRA.FalconsActionAimedKick.State pass = 5;
        MRA.FalconsActionAimedKick.State shoot = 6;
        MRA.FalconsGetball.State getball = 8;
        MRA.FalconsActionPark.State park = 12;
        MRA.FalconsActionCatchBall.State catchball = 13;
        MRA.FalconsActionKeeper.State keeper = 14;
    }
}

message ActionSample
{
    google.protobuf.Timestamp timestamp = 1;
    Input input = 2;
    Output output = 3;
    Diagnostics diagnostics = 4;
}

message ActionHistory
{
    MRA.Datatypes.ActionType type = 1;
    repeated ActionSample samples = 2;
    Params params = 3; // at start of the running action (assuming no reconfiguration happens during action)
}

message State
{
    ActionState action = 1;
    ActionHistory history = 2; // growing buffer for running action, flushed to file (if so configured) upon starting a new one
}

