syntax = "proto3";

package MRA.RobotsportsVelocityControl;

message SpgConfig
{
    bool synchronizeRotation = 1; // true means smearing out the rotation (non-greedy), but not always facing ball for position based setpoints
    double weightFactorClosedLoopVel = 2; // tuning parameter
    double weightFactorClosedLoopPos = 3; // tuning parameter
    double latencyOffset = 4; // [seconds] tuning parameter
    bool convergenceWorkaround = 5; // intended for simulation
    bool synchronizeRotationVelocity = 6; // true means smearing out the rotation (non-greedy), but not always facing ball for velocity based setpoints
}

message DribbleConfig
{
    bool applyLimitsToBall = 1;
    double radiusRobotToBall = 2;
}

message DeadzoneConfig
{
    bool enabled = 1;
    double toleranceXY = 2; // [m] only calculate if robot is not yet close enough
    double toleranceRz = 3; // [rad] only calculate if robot is not yet close enough
}

message XYRzLimits
{
    double X = 1;
    double Y = 2;
    double Rz = 3;
    double XY = 4; // XY together (linear)
    double Yforward = 5; // optional Y split, ballHandling is easier driving forward than backward
    double Ybackward = 6;
}

message Limits
{
    string name = 1;
    XYRzLimits maxVel = 2;
    XYRzLimits maxAcc = 3;
    XYRzLimits maxDec = 4;
    XYRzLimits accThreshold = 5;
    XYRzLimits maxJerk = 6;
}

message Params
{
    double dt = 1; // [seconds] timestep to use, typically 1/motionfrequency
    double timeout = 2; // [seconds] after which to reset SPG state (watchdog)
    SpgConfig spg = 3;
    DribbleConfig dribble = 4;
    DeadzoneConfig deadzone = 5;
    repeated Limits limits = 6; // array, content corresponds with motionProfile input
    // NOTE: it is allowed to omit items in defaultParams, then defaults from limits[0] will be used
}

